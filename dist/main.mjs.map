{"version":3,"file":"main.mjs","sources":["../src/mixin.ts","../src/main.ts"],"sourcesContent":["export const originURL = 'https://chat-go.jwzhd.com'","import { originURL } from './mixin.js'\r\nimport { v3, v4 } from 'uuid'\r\nimport { createReadStream } from 'fs'\r\nimport FormData from 'form-data'\r\nimport fetch from 'node-fetch'\r\nimport { extname } from 'path'\r\n\r\n/**\r\n * 模拟 Windows 客户端使用邮箱登录的过程\r\n * @param email 登录邮箱\r\n * @param password 登录密码\r\n * @returns 登录凭证 TOKEN\r\n */\r\nexport async function loginByEmail(email: string, password: string) {\r\n    const response = await fetch(`${originURL}/v1/user/email-login`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            email,\r\n            password,\r\n            deviceId: v3(Math.random().toString(), v3.URL),\r\n            platform: 'windows'\r\n        })\r\n    }).then(res => res.json()) as { data: { token: string } }\r\n    return response.data.token\r\n}\r\n\r\n/**\r\n * 获取文件上传令牌\r\n * @param token 登录凭证\r\n * @returns 文件上传令牌\r\n */\r\nexport async function getUploadToken(token: string) {\r\n    const response = await fetch(`${originURL}/v1/misc/qiniu-token`, {\r\n        headers: { token }\r\n    }).then(res => res.json()) as { data: { token: string } }\r\n    return response.data.token\r\n}\r\n\r\n/**\r\n * 上传图片\r\n * ```\r\n * // 使用示例\r\n * const token = await loginByEmail('user@hello.com', '12345678')\r\n * const uploadToken = await getUploadToken(token)\r\n * const downloadURL = await uploadImage(uploadToken, 'E:/视频/Video.mp4')\r\n * ```\r\n * @param token 通过 {@link getUploadToken} 获取的上传令牌\r\n * @param filePath 需要上传的文件路径\r\n * @returns 文件下载地址，需要配置 `Referer: https://www.yhchat.com/` 访问。\r\n */\r\nexport async function uploadImage(token: string, filePath: string) {\r\n    const body = new FormData()\r\n    body.append('token', token)\r\n    body.append('file', createReadStream(filePath))\r\n    body.append('key', v4() + extname(filePath))\r\n    const response = await fetch(`https://upload-z2.qiniup.com/`, {\r\n        method: 'POST',\r\n        body,\r\n        headers: body.getHeaders()\r\n    }).then(res => res.json()) as {\r\n        key: string\r\n        hash: string\r\n        fsize: number\r\n        error?: string\r\n    }\r\n    if (response.error) throw new Error(response.error)\r\n    return `https://chat-img.jwznb.com/${response.key}`\r\n}"],"names":[],"mappings":";;;;;;AACO,MAAM,SAAS,GAAG,2BAA2B;;ACM7C,eAAe,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE;AACpD,EAAE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,oBAAoB,CAAC,EAAE;AACnE,IAAI,MAAM,EAAE,MAAM;AAClB,IAAI,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;AACzB,MAAM,KAAK;AACX,MAAM,QAAQ;AACd,MAAM,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC;AACpD,MAAM,QAAQ,EAAE;AAChB,KAAK;AACL,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,EAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK;AAC5B;AACO,eAAe,cAAc,CAAC,KAAK,EAAE;AAC5C,EAAE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,oBAAoB,CAAC,EAAE;AACnE,IAAI,OAAO,EAAE,EAAE,KAAK;AACpB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,EAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK;AAC5B;AACO,eAAe,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;AACnD,EAAE,MAAM,IAAI,GAAG,IAAI,QAAQ,EAAE;AAC7B,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC;AAC7B,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACjD,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC9C,EAAE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAC,6BAA6B,CAAC,EAAE;AAChE,IAAI,MAAM,EAAE,MAAM;AAClB,IAAI,IAAI;AACR,IAAI,OAAO,EAAE,IAAI,CAAC,UAAU;AAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;AACrD,EAAE,OAAO,CAAC,2BAA2B,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;AACrD;;;;"}